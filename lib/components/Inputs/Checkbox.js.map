{"version":3,"sources":["../../../src/components/Inputs/Checkbox.js"],"names":["Checkbox","state","isChecked","handleCheck","event","props","onCheck","checked","setState","nextProps","hasCheckedProp","hasOwnProperty","hasNewDefaultProp","defaultChecked","checkbox","className","errorText","tooltip","name","label","value","rest","propTypes","bool","string","node","onBlur","func","onChange","onFocus","validator","any"],"mappings":";;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;+eANA;;IAQMA,Q;;;;;;;;;;;;;;0LAiBJC,K,GAAQ;AACNC,iBAAW;AADL,K,QA+BRC,W,GAAc,UAACC,KAAD,EAAW;AACvB,UAAI,MAAKC,KAAL,CAAWC,OAAf,EAAwB;AACtB,cAAKD,KAAL,CAAWC,OAAX,CAAmBF,KAAnB,EAA0B,MAAKF,SAAL,EAA1B;AACD;AACF,K;;;;;yCA9BoB;AAAA,UACXK,OADW,GACC,KAAKF,KADN,CACXE,OADW;;AAEnB,UAAIA,OAAJ,EAAa;AACX,aAAKC,QAAL,CAAc;AACZN,qBAAW;AADC,SAAd;AAGD;AACF;;;8CAEyBO,S,EAAW;AACnC,UAAMC,iBAAiBD,UAAUE,cAAV,CAAyB,SAAzB,CAAvB;AACA,UAAMC,oBACHH,UAAUE,cAAV,CAAyB,gBAAzB,KACAF,UAAUI,cAAV,KAA6B,KAAKR,KAAL,CAAWQ,cAF3C;;AAIA,UAAIH,kBAAkBE,iBAAtB,EAAyC;AACvC,YAAMV,YAAYO,UAAUF,OAAV,IAAqBE,UAAUI,cAA/B,IAAiD,KAAnE;;AAEA,aAAKL,QAAL,CAAc,EAAEN,oBAAF,EAAd;AACD;AACF;;;gCAEW;AACV,aAAO,KAAKY,QAAL,CAAcP,OAArB;AACD;;;6BAQQ;AAAA;;AAAA,mBAYH,KAAKF,KAZF;AAAA,UAELE,OAFK,UAELA,OAFK;AAAA,UAGLQ,SAHK,UAGLA,SAHK;AAAA,UAILC,SAJK,UAILA,SAJK;AAAA,UAKLC,OALK,UAKLA,OALK;AAAA,UAMLC,IANK,UAMLA,IANK;AAAA,UAOLC,KAPK,UAOLA,KAPK;AAAA,UAQLb,OARK,UAQLA,OARK;AAAA,UASLJ,SATK,UASLA,SATK;AAAA,UAULkB,KAVK,UAULA,KAVK;AAAA,UAWFC,IAXE;;AAcP,aACE;AAAA;AAAA,UAAK,WAAU,qBAAf;AACE;AACE,qBAAW,0BAAG,CAAC,UAAD,EAAaN,SAAb,CAAH,CADb;AAEE,gBAAMG,IAFR;AAGE,gBAAK,UAHP;AAIE,eAAK,aAACJ,QAAD,EAAc;AAAE,mBAAKA,QAAL,GAAgBA,QAAhB;AAA2B,WAJlD;AAKE,mBAAS,KAAKb,KAAL,CAAWC,SALtB;AAME,oBAAU,KAAKC,WANjB;AAOE,iBAAOiB;AAPT,WAQMC,IARN,EADF;AAWE;AACE,qBAAU,iBADZ;AAEE,gBAAMH,IAFR;AAGE,iBAAOC,KAHT;AAIE,qBAAWH,SAJb;AAKE,mBAASC;AALX;AAXF,OADF;AAqBD;;;;;;AAzFGjB,Q,CACGsB,S,GAAY;AACjBf,WAAS,oBAAUgB,IADF;AAEjBR,aAAW,oBAAUS,MAFJ;AAGjBX,kBAAgB,oBAAUU,IAHT;AAIjBP,aAAW,oBAAUS,IAJJ;AAKjBR,WAAS,oBAAUO,MALF;AAMjBN,QAAM,oBAAUM,MANC;AAOjBL,SAAO,oBAAUK,MAPA;AAQjBE,UAAQ,oBAAUC,IARD;AASjBrB,WAAS,oBAAUqB,IATF;AAUjBC,YAAU,oBAAUD,IAVH;AAWjBE,WAAS,oBAAUF,IAXF;AAYjBG,aAAW,oBAAUH,IAZJ;AAajBP,SAAO,oBAAUW;AAbA,C;kBA2FN/B,Q","file":"Checkbox.js","sourcesContent":["/* eslint-disable react/require-default-props */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport InputLabel from './InputLabel';\n\nclass Checkbox extends Component {\n  static propTypes = {\n    checked: PropTypes.bool,\n    className: PropTypes.string,\n    defaultChecked: PropTypes.bool,\n    errorText: PropTypes.node,\n    tooltip: PropTypes.string,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    onBlur: PropTypes.func,\n    onCheck: PropTypes.func,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    validator: PropTypes.func,\n    value: PropTypes.any,\n  }\n\n  state = {\n    isChecked: false,\n  }\n\n\n  componentWillMount() {\n    const { checked } = this.props;\n    if (checked) {\n      this.setState({\n        isChecked: true,\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const hasCheckedProp = nextProps.hasOwnProperty('checked');\n    const hasNewDefaultProp =\n      (nextProps.hasOwnProperty('defaultChecked') &&\n      (nextProps.defaultChecked !== this.props.defaultChecked));\n\n    if (hasCheckedProp || hasNewDefaultProp) {\n      const isChecked = nextProps.checked || nextProps.defaultChecked || false;\n\n      this.setState({ isChecked });\n    }\n  }\n\n  isChecked() {\n    return this.checkbox.checked;\n  }\n\n  handleCheck = (event) => {\n    if (this.props.onCheck) {\n      this.props.onCheck(event, this.isChecked());\n    }\n  }\n\n  render() {\n    const {\n      checked, // eslint-disable-line no-unused-vars\n      className,\n      errorText,\n      tooltip,\n      name,\n      label,\n      onCheck, // eslint-disable-line no-unused-vars\n      isChecked, // eslint-disable-line\n      value,\n      ...rest\n    } = this.props;\n\n    return (\n      <div className=\"checkbox__container\">\n        <input\n          className={cx(['checkbox', className])}\n          name={name}\n          type=\"checkbox\"\n          ref={(checkbox) => { this.checkbox = checkbox; }}\n          checked={this.state.isChecked}\n          onChange={this.handleCheck}\n          value={value}\n          {...rest}\n        />\n        <InputLabel\n          className=\"checkbox__label\"\n          name={name}\n          label={label}\n          errorText={errorText}\n          tooltip={tooltip}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Checkbox;\n"]}