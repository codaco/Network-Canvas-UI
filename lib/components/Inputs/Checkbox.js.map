{"version":3,"sources":["../../../src/components/Inputs/Checkbox.js"],"names":["Checkbox","state","isChecked","handleCheck","event","props","onCheck","checked","setState","nextProps","hasCheckedProp","hasOwnProperty","hasNewDefaultProp","defaultChecked","refs","checkbox","className","errorText","name","label","value","rest","propTypes","bool","string","node","onBlur","func","onChange","onFocus","validator","any"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;IAEMA,Q;;;;;;;;;;;;;;0LAgBJC,K,GAAQ;AACNC,iBAAW;AADL,K,QA+BRC,W,GAAc,UAACC,KAAD,EAAW;AACvB,UAAI,MAAKC,KAAL,CAAWC,OAAf,EAAwB;AACtB,cAAKD,KAAL,CAAWC,OAAX,CAAmBF,KAAnB,EAA0B,MAAKF,SAAL,EAA1B;AACD;AACF,K;;;;;yCA9BoB;AAAA,UACXK,OADW,GACC,KAAKF,KADN,CACXE,OADW;;AAEnB,UAAIA,OAAJ,EAAa;AACX,aAAKC,QAAL,CAAc;AACZN,qBAAW;AADC,SAAd;AAGD;AACF;;;8CAEyBO,S,EAAW;AACnC,UAAMC,iBAAiBD,UAAUE,cAAV,CAAyB,SAAzB,CAAvB;AACA,UAAMC,oBACHH,UAAUE,cAAV,CAAyB,gBAAzB,KACAF,UAAUI,cAAV,KAA6B,KAAKR,KAAL,CAAWQ,cAF3C;;AAIA,UAAIH,kBAAkBE,iBAAtB,EAAyC;AACvC,YAAMV,YAAYO,UAAUF,OAAV,IAAqBE,UAAUI,cAA/B,IAAiD,KAAnE;;AAEA,aAAKL,QAAL,CAAc,EAAEN,oBAAF,EAAd;AACD;AACF;;;gCAEW;AACV,aAAO,KAAKY,IAAL,CAAUC,QAAV,CAAmBR,OAA1B,CADU,CACyB;AACpC;;;6BAQQ;AAAA,mBAWH,KAAKF,KAXF;AAAA,UAELE,OAFK,UAELA,OAFK;AAAA,UAGLS,SAHK,UAGLA,SAHK;AAAA,UAILC,SAJK,UAILA,SAJK;AAAA,UAKLC,IALK,UAKLA,IALK;AAAA,UAMLC,KANK,UAMLA,KANK;AAAA,UAOLb,OAPK,UAOLA,OAPK;AAAA,UAQLJ,SARK,UAQLA,SARK;AAAA,UASLkB,KATK,UASLA,KATK;AAAA,UAUFC,IAVE;;AAaP,aACE;AAAA;AAAA,UAAK,WAAU,qBAAf;AACE;AACE,qBAAW,0BAAG,CAAC,UAAD,EAAaL,SAAb,CAAH,CADb;AAEE,gBAAME,IAFR;AAGE,gBAAK,UAHP;AAIE,eAAI,UAJN;AAKE,mBAAS,KAAKjB,KAAL,CAAWC,SALtB;AAME,oBAAU,KAAKC,WANjB;AAOE,iBAAOiB;AAPT,WAQMC,IARN,EADF;AAWE;AACE,gBAAMH,IADR;AAEE,iBAAOC,KAFT;AAGE,qBAAWF;AAHb;AAXF,OADF;AAmBD;;;;;;AArFGjB,Q,CACGsB,S,GAAY;AACjBf,WAAS,oBAAUgB,IADF;AAEjBP,aAAW,oBAAUQ,MAFJ;AAGjBX,kBAAgB,oBAAUU,IAHT;AAIjBN,aAAW,oBAAUQ,IAJJ;AAKjBP,QAAM,oBAAUM,MALC;AAMjBL,SAAO,oBAAUK,MANA;AAOjBE,UAAQ,oBAAUC,IAPD;AAQjBrB,WAAS,oBAAUqB,IARF;AASjBC,YAAU,oBAAUD,IATH;AAUjBE,WAAS,oBAAUF,IAVF;AAWjBG,aAAW,oBAAUH,IAXJ;AAYjBP,SAAO,oBAAUW;AAZA,C;kBAuFN/B,Q","file":"Checkbox.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport InputLabel from './InputLabel';\n\nclass Checkbox extends Component {\n  static propTypes = {\n    checked: PropTypes.bool,\n    className: PropTypes.string,\n    defaultChecked: PropTypes.bool,\n    errorText: PropTypes.node,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    onBlur: PropTypes.func,\n    onCheck: PropTypes.func,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    validator: PropTypes.func,\n    value: PropTypes.any,\n  }\n\n  state = {\n    isChecked: false,\n  }\n\n\n  componentWillMount() {\n    const { checked } = this.props;\n    if (checked) {\n      this.setState({\n        isChecked: true,\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const hasCheckedProp = nextProps.hasOwnProperty('checked');\n    const hasNewDefaultProp =\n      (nextProps.hasOwnProperty('defaultChecked') &&\n      (nextProps.defaultChecked !== this.props.defaultChecked));\n\n    if (hasCheckedProp || hasNewDefaultProp) {\n      const isChecked = nextProps.checked || nextProps.defaultChecked || false;\n\n      this.setState({ isChecked });\n    }\n  }\n\n  isChecked() {\n    return this.refs.checkbox.checked; // eslint-disable-line\n  }\n\n  handleCheck = (event) => {\n    if (this.props.onCheck) {\n      this.props.onCheck(event, this.isChecked());\n    }\n  }\n\n  render() {\n    const {\n      checked, // eslint-disable-line no-unused-vars\n      className,\n      errorText,\n      name,\n      label,\n      onCheck, // eslint-disable-line no-unused-vars\n      isChecked, // eslint-disable-line\n      value,\n      ...rest\n    } = this.props;\n\n    return (\n      <div className=\"checkbox__container\">\n        <input\n          className={cx(['checkbox', className])}\n          name={name}\n          type=\"checkbox\"\n          ref=\"checkbox\"\n          checked={this.state.isChecked}\n          onChange={this.handleCheck}\n          value={value}\n          {...rest}\n        />\n        <InputLabel\n          name={name}\n          label={label}\n          errorText={errorText}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Checkbox;\n"]}