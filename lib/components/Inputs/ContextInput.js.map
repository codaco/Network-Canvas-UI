{"version":3,"sources":["../../../src/components/Inputs/ContextInput.js"],"names":["ContextInput","state","isChecked","handleCheck","event","props","onCheck","checked","setState","nextProps","hasCheckedProp","hasOwnProperty","hasNewDefaultProp","defaultChecked","refs","checkbox","className","color","errorText","label","value","rest","buttonClassName","context__button","name","propTypes","bool","string","node","onBlur","func","onChange","onFocus","any"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;IAEMA,Y;;;;;;;;;;;;;;kMAgBJC,K,GAAQ;AACNC,iBAAW;AADL,K,QA8BRC,W,GAAc,UAACC,KAAD,EAAW;AACvB,UAAI,MAAKC,KAAL,CAAWC,OAAf,EAAwB;AACtB,cAAKD,KAAL,CAAWC,OAAX,CAAmBF,KAAnB,EAA0B,MAAKF,SAAL,EAA1B;AACD;AACF,K;;;;;yCA9BoB;AAAA,UACXK,OADW,GACC,KAAKF,KADN,CACXE,OADW;;AAEnB,UAAIA,OAAJ,EAAa;AACX,aAAKC,QAAL,CAAc;AACZN,qBAAW;AADC,SAAd;AAGD;AACF;;;8CAEyBO,S,EAAW;AACnC,UAAMC,iBAAiBD,UAAUE,cAAV,CAAyB,SAAzB,CAAvB;AACA,UAAMC,oBACHH,UAAUE,cAAV,CAAyB,gBAAzB,KACAF,UAAUI,cAAV,KAA6B,KAAKR,KAAL,CAAWQ,cAF3C;;AAIA,UAAIH,kBAAkBE,iBAAtB,EAAyC;AACvC,YAAMV,YAAYO,UAAUF,OAAV,IAAqBE,UAAUI,cAA/B,IAAiD,KAAnE;;AAEA,aAAKL,QAAL,CAAc,EAAEN,oBAAF,EAAd;AACD;AACF;;;gCAEW;AACV,aAAO,KAAKY,IAAL,CAAUC,QAAV,CAAmBR,OAA1B;AACD;;;6BAQQ;AAAA,mBAWH,KAAKF,KAXF;AAAA,UAELE,OAFK,UAELA,OAFK;AAAA,UAGLS,SAHK,UAGLA,SAHK;AAAA,UAILC,KAJK,UAILA,KAJK;AAAA,UAKLC,SALK,UAKLA,SALK;AAAA,UAMLC,KANK,UAMLA,KANK;AAAA,UAOLC,KAPK,UAOLA,KAPK;AAAA,UAQLd,OARK,UAQLA,OARK;AAAA,UASLJ,SATK,UASLA,SATK;AAAA,UAUFmB,IAVE;;AAaP,UAAMC,kBAAkB;AACtBC,yBAAiB;AADK,+BAEDN,KAFC,EAES,CAAC,CAACA,KAFX,EAAxB;;AAKA,aACE;AAAA;AAAA,UAAK,WAAU,oBAAf;AACE;AACE,qBAAW,0BAAG,CAAC,SAAD,EAAYD,SAAZ,CAAH,CADb;AAEE,gBAAMQ,IAFR;AAGE,gBAAK,UAHP;AAIE,eAAI,UAJN;AAKE,iBAAOJ,KALT;AAME,mBAAS,KAAKnB,KAAL,CAAWC,SANtB;AAOE,oBAAU,KAAKC;AAPjB,WAQMkB,IARN,EADF;AAWE;AAAA;AAAA,YAAK,WAAWC,eAAhB;AACE;AAAA;AAAA;AAAOH;AAAP;AADF;AAXF,OADF;AAiBD;;;;;;AAvFGnB,Y,CACGyB,S,GAAY;AACjBlB,WAAS,oBAAUmB,IADF;AAEjBV,aAAW,oBAAUW,MAFJ;AAGjBV,SAAO,oBAAUU,MAHA;AAIjBd,kBAAgB,oBAAUa,IAJT;AAKjBR,aAAW,oBAAUU,IALJ;AAMjBJ,QAAM,oBAAUG,MANC;AAOjBR,SAAO,oBAAUQ,MAPA;AAQjBE,UAAQ,oBAAUC,IARD;AASjBxB,WAAS,oBAAUwB,IATF;AAUjBC,YAAU,oBAAUD,IAVH;AAWjBE,WAAS,oBAAUF,IAXF;AAYjBV,SAAO,oBAAUa;AAZA,C;kBAyFNjC,Y","file":"ContextInput.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nclass ContextInput extends Component {\n  static propTypes = {\n    checked: PropTypes.bool,\n    className: PropTypes.string,\n    color: PropTypes.string,\n    defaultChecked: PropTypes.bool,\n    errorText: PropTypes.node,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    onBlur: PropTypes.func,\n    onCheck: PropTypes.func,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    value: PropTypes.any,\n  }\n\n  state = {\n    isChecked: false,\n  }\n\n  componentWillMount() {\n    const { checked } = this.props;\n    if (checked) {\n      this.setState({\n        isChecked: true,\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const hasCheckedProp = nextProps.hasOwnProperty('checked');\n    const hasNewDefaultProp =\n      (nextProps.hasOwnProperty('defaultChecked') &&\n      (nextProps.defaultChecked !== this.props.defaultChecked));\n\n    if (hasCheckedProp || hasNewDefaultProp) {\n      const isChecked = nextProps.checked || nextProps.defaultChecked || false;\n\n      this.setState({ isChecked });\n    }\n  }\n\n  isChecked() {\n    return this.refs.checkbox.checked;\n  }\n\n  handleCheck = (event) => {\n    if (this.props.onCheck) {\n      this.props.onCheck(event, this.isChecked());\n    }\n  }\n\n  render() {\n    const {\n      checked, // eslint-disable-line\n      className,\n      color,\n      errorText,\n      label,\n      value,\n      onCheck, // eslint-disable-line\n      isChecked, // eslint-disable-line\n      ...rest\n    } = this.props;\n\n    const buttonClassName = cx({\n      context__button: true,\n      [`context__button--${color}`]: !!color,\n    });\n\n    return (\n      <div className=\"context__container\">\n        <input\n          className={cx(['context', className])}\n          name={name}\n          type=\"checkbox\"\n          ref=\"checkbox\"\n          value={value}\n          checked={this.state.isChecked}\n          onChange={this.handleCheck}\n          {...rest}\n        />\n        <div className={buttonClassName}>\n          <span>{label}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ContextInput;\n"]}