{"version":3,"sources":["../../../src/components/Inputs/RadioGroup.js"],"names":["RadioGroup","handleKeyDown","e","children","props","currentIndex","currentTarget","indexOf","target","key","onChange","value","nextIndex","length","prevIndex","className","errorText","name","label","onRadioClick","options","rest","map","option","idx","Children","child","index","type","cloneElement","checked","propTypes","string","node","func","array","any"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;;;;;IAEMA,U;;;;;;;;;;;;;;8LAaJC,a,GAAgB,UAACC,CAAD,EAAO;AAAA,UACbC,QADa,GACA,MAAKC,KADL,CACbD,QADa;;AAErB,UAAME,eAAe,6BAAIH,EAAEI,aAAF,CAAgBH,QAApB,GAA8BI,OAA9B,CAAsCL,EAAEM,MAAxC,CAArB;AACA,cAAQN,EAAEO,GAAV;AACE,aAAK,OAAL;AACE,gBAAKL,KAAL,CAAWM,QAAX,CAAoBP,SAASE,YAAT,EAAuBD,KAAvB,CAA6BO,KAAjD;AACA;AACF,aAAK,YAAL;AACA,aAAK,WAAL;AACE,cAAMC,YAAYP,iBAAiBF,SAASU,MAAT,GAAkB,CAAnC,GAAuC,CAAvC,GAA2CR,eAAe,CAA5E;AACA,gBAAKD,KAAL,CAAWM,QAAX,CAAoBP,SAASS,SAAT,EAAoBR,KAApB,CAA0BO,KAA9C;AACA;AACF,aAAK,WAAL;AACA,aAAK,SAAL;AACE,cAAMG,YAAYT,iBAAiB,CAAjB,GAAqBF,SAASU,MAAT,GAAkB,CAAvC,GAA2CR,eAAe,CAA5E;AACA,gBAAKD,KAAL,CAAWM,QAAX,CAAoBP,SAASW,SAAT,EAAoBV,KAApB,CAA0BO,KAA9C;AACA;AACF;AACE;AAfJ;AAiBD,K;;;;;6BAEQ;AAAA,mBAWH,KAAKP,KAXF;AAAA,UAELW,SAFK,UAELA,SAFK;AAAA,UAGLZ,QAHK,UAGLA,QAHK;AAAA,UAILa,SAJK,UAILA,SAJK;AAAA,UAKLC,IALK,UAKLA,IALK;AAAA,UAMLC,KANK,UAMLA,KANK;AAAA,UAOLC,YAPK,UAOLA,YAPK;AAAA,UAQLC,OARK,UAQLA,OARK;AAAA,UASLT,KATK,UASLA,KATK;AAAA,UAUFU,IAVE;;AAaP,aACE;AAAA;AAAA,UAAK,WAAU,wBAAf,EAAwC,WAAW,KAAKpB,aAAxD;AACE;AAAA;AAAA,YAAK,WAAU,aAAf;AAEEmB,oBAAUA,QAAQE,GAAR,CAAY,UAACC,MAAD,EAASC,GAAT;AAAA,mBACpB;AACE,mBAAKA,GADP;AAEE,wBAAUL,YAFZ;AAGE,uBAASR,UAAUY,MAHrB;AAIE,oBAAMN,IAJR;AAKE,qBAAOM;AALT,cADoB;AAAA,WAAZ,CAAV,GASA,gBAAME,QAAN,CAAeH,GAAf,CAAmBnB,QAAnB,EAA6B,UAACuB,KAAD,EAAQC,KAAR,EAAkB;AAC7C,gBAAID,MAAME,IAAN,yBAAJ,EAA+B;AAC7B,qBAAO,gBAAMC,YAAN,CAAmBH,KAAnB,EAA0B;AAC/BT,sBAAMA,IADyB;AAE/Ba,yBAASJ,MAAMtB,KAAN,CAAYO,KAAZ,KAAsBA,KAFA;AAG/BD,0BAAUS;AAHqB,eAA1B,CAAP;AAKD,aAND,MAMO;AACL,qBAAOO,KAAP;AACD;AACF,WAVD;AAXF,SADF;AAyBE;AACE,gBAAMT,IADR;AAEE,iBAAOC,KAFT;AAGE,qBAAWF;AAHb;AAzBF,OADF;AAiCD;;;;;;AAjFGhB,U,CAEG+B,S,GAAY;AACjBhB,aAAW,oBAAUiB,MADJ;AAEjB7B,YAAU,oBAAU8B,IAFH;AAGjBjB,aAAW,oBAAUiB,IAHJ;AAIjBhB,QAAM,oBAAUe,MAJC;AAKjBd,SAAO,oBAAUc,MALA;AAMjBb,gBAAc,oBAAUe,IANP;AAOjBd,WAAS,oBAAUe,KAPF;AAQjBxB,SAAO,oBAAUyB;AARA,C;kBAkFNpC,U","file":"RadioGroup.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport InputLabel from './InputLabel';\nimport RadioInput from './RadioInput';\n\nclass RadioGroup extends Component {\n\n  static propTypes = {\n    className: PropTypes.string,\n    children: PropTypes.node,\n    errorText: PropTypes.node,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    onRadioClick: PropTypes.func,\n    options: PropTypes.array,\n    value: PropTypes.any\n  }\n\n  handleKeyDown = (e) => {\n    const { children } = this.props;\n    const currentIndex = [...e.currentTarget.children].indexOf(e.target);\n    switch (e.key) {\n      case 'Enter':\n        this.props.onChange(children[currentIndex].props.value);\n        break;\n      case 'ArrowRight':\n      case 'ArrowDown':\n        const nextIndex = currentIndex === children.length - 1 ? 0 : currentIndex + 1;\n        this.props.onChange(children[nextIndex].props.value);\n        break;\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        const prevIndex = currentIndex === 0 ? children.length - 1 : currentIndex - 1;\n        this.props.onChange(children[prevIndex].props.value);\n        break;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const {\n      className,\n      children,\n      errorText,\n      name,\n      label,\n      onRadioClick,\n      options,\n      value,\n      ...rest\n    } = this.props;\n\n    return (\n      <div className=\"radio-group__container\" onKeyDown={this.handleKeyDown}>\n        <div className=\"grid__stack\">\n        {\n          options ? options.map((option, idx) => (\n            <RadioInput\n              key={idx}\n              onChange={onRadioClick}\n              checked={value === option}\n              name={name}\n              value={option}\n            />\n          )) :\n          React.Children.map(children, (child, index) => {\n            if (child.type === RadioInput) {\n              return React.cloneElement(child, {\n                name: name,\n                checked: child.props.value === value,\n                onChange: onRadioClick\n              })\n            } else {\n              return child\n            }\n          })\n        }\n        </div>\n        <InputLabel\n          name={name}\n          label={label}\n          errorText={errorText}\n        />\n      </div>\n    );\n  }\n}\n\nexport default RadioGroup;\n\n"]}