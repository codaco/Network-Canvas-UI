{"version":3,"sources":["../../../src/components/Inputs/TextInput.js"],"names":["TextInput","handleKeyDown","e","props","isNumericOnly","metaKey","key","which","test","String","fromCharCode","preventDefault","onKeyDown","className","errorText","name","label","onChange","hasFocus","placeholder","value","rest","showPlaceholder","propTypes","string","node","disabled","bool","func","any"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;IAEMA,S;;;;;;;;;;;;;;4LAcJC,a,GAAgB,UAACC,CAAD,EAAO;AACrB,UAAI,MAAKC,KAAL,CAAWC,aAAf,EAA8B;AAC5B,YAAI,EACFF,EAAEG,OAAF,IAAa;AACbH,UAAEI,GAAF,IAAS,CAAC,YAAD,EAAe,WAAf,CADT,IACwC;AACxCJ,UAAEK,KAAF,KAAY,CAFZ,IAEiB;AACjB,gBAAQC,IAAR,CAAaC,OAAOC,YAAP,CAAoBR,EAAEK,KAAtB,CAAb,CAJE,CAIyC;AAJzC,SAAJ,EAKG;AACDL,YAAES,cAAF;AACD;AACF;AACD,YAAKR,KAAL,CAAWS,SAAX,IAAwB,MAAKT,KAAL,CAAWS,SAAX,CAAqBV,CAArB,CAAxB;AACD,K;;;;;6BAEQ;AAAA,mBAYH,KAAKC,KAZF;AAAA,UAELU,SAFK,UAELA,SAFK;AAAA,UAGLC,SAHK,UAGLA,SAHK;AAAA,UAILC,IAJK,UAILA,IAJK;AAAA,UAKLC,KALK,UAKLA,KALK;AAAA,UAMLC,QANK,UAMLA,QANK;AAAA,UAOLb,aAPK,UAOLA,aAPK;AAAA,UAQLc,QARK,UAQLA,QARK;AAAA,UASLC,WATK,UASLA,WATK;AAAA,UAULC,KAVK,UAULA,KAVK;AAAA,UAWFC,IAXE;;AAcP,UAAMC,kBAAmBJ,YAAY,CAACE,KAAd,GAAuBD,WAAvB,GAAqC,IAA7D;;AAEA,aACE;AAAA;AAAA,UAAK,WAAU,kCAAf;AACE;AACE,qBAAW,0BAAG,CAAC,MAAD,EAASN,SAAT,CAAH,CADb;AAEE,gBAAME,IAFR;AAGE,gBAAMX,gBAAgB,KAAhB,GAAwB,MAHhC;AAIE,oBAAUa,QAJZ;AAKE,qBAAW,KAAKhB,aALlB;AAME,uBAAaqB;AANf,WAOMD,IAPN,EADF;AAUE;AACE,qBAAW,aADb;AAEE,kBAAQD,KAFV;AAGE,gBAAML,IAHR;AAIE,iBAAOC,KAJT;AAKE,qBAAWF;AALb;AAVF,OADF;AAoBD;;;;;;AAhEGd,S,CACGuB,S,GAAY;AACjBV,aAAW,oBAAUW,MADJ;AAEjBV,aAAW,oBAAUW,IAFJ;AAGjBC,YAAU,oBAAUC,IAHH;AAIjBZ,QAAM,oBAAUS,MAJC;AAKjBpB,iBAAe,oBAAUuB,IALR;AAMjBX,SAAO,oBAAUQ,MANA;AAOjBN,YAAU,oBAAUS,IAPH;AAQjBV,YAAU,oBAAUW,IARH;AASjBT,eAAa,oBAAUK,MATN;AAUjBJ,SAAO,oBAAUS;AAVA,C;kBAkEN7B,S","file":"TextInput.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport InputLabel from './InputLabel';\n\nclass TextInput extends Component {\n  static propTypes = {\n    className: PropTypes.string,\n    errorText: PropTypes.node,\n    disabled: PropTypes.bool,\n    name: PropTypes.string,\n    isNumericOnly: PropTypes.bool,\n    label: PropTypes.string,\n    hasFocus: PropTypes.bool,\n    onChange: PropTypes.func,\n    placeholder: PropTypes.string,\n    value: PropTypes.any,\n  }\n\n  handleKeyDown = (e) => {\n    if (this.props.isNumericOnly) {\n      if (!(\n        e.metaKey || // cmd/ctrl\n        e.key in ['ArrowRight', 'ArrowLeft'] || // arrow keys\n        e.which === 8 || // delete key\n        /[0-9]/.test(String.fromCharCode(e.which)) // numbers\n      )) {\n        e.preventDefault();\n      }\n    }\n    this.props.onKeyDown && this.props.onKeyDown(e);\n  }\n\n  render() {\n    const {\n      className,\n      errorText,\n      name,\n      label,\n      onChange,\n      isNumericOnly,\n      hasFocus,\n      placeholder,\n      value,\n      ...rest\n    } = this.props;\n\n    const showPlaceholder = (hasFocus && !value) ? placeholder : null;\n\n    return (\n      <div className=\"input__container text__container\">\n        <input\n          className={cx(['text', className])}\n          name={name}\n          type={isNumericOnly ? 'tel' : 'text'}\n          onChange={onChange}\n          onKeyDown={this.handleKeyDown}\n          placeholder={showPlaceholder}\n          {...rest}\n        />\n        <InputLabel\n          className={'text__label'}\n          active={value}\n          name={name}\n          label={label}\n          errorText={errorText}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TextInput;\n"]}