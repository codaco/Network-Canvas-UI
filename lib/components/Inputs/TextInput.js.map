{"version":3,"sources":["../../../src/components/Inputs/TextInput.js"],"names":["TextInput","state","hasValue","isFocused","handleBlur","e","setState","props","onBlur","handleFocus","disabled","onFocus","nextProps","hasOwnProperty","Boolean","value","validator","className","errorText","name","label","onChange","placeholder","rest","inputLabelClassName","inputErrorClassName","showPlaceholder","propTypes","string","node","func","any"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEMA,S;;;;;;;;;;;;;;4LACJC,K,GAAQ;AACNC,gBAAU,KADJ;AAENC,iBAAW;AAFL,K,QA4BRC,U,GAAa,UAACC,CAAD,EAAO;AAClB,YAAKC,QAAL,CAAc,EAAEH,WAAW,KAAb,EAAd;AACA,UAAI,MAAKI,KAAL,CAAWC,MAAf,EAAuB;AACrB,cAAKD,KAAL,CAAWC,MAAX,CAAkBH,CAAlB;AACD;AACF,K,QAEDI,W,GAAc,UAACJ,CAAD,EAAO;AACnB,UAAI,MAAKE,KAAL,CAAWG,QAAf,EAAyB;AACvB;AACD;AACD,YAAKJ,QAAL,CAAc,EAAEH,WAAW,IAAb,EAAd;AACA,UAAI,MAAKI,KAAL,CAAWI,OAAf,EAAwB;AACtB,cAAKJ,KAAL,CAAWI,OAAX,CAAmBN,CAAnB;AACD;AACF,K;;;;;8CAzByBO,S,EAAW;AACnC,UAAIA,UAAUC,cAAV,CAAyB,OAAzB,CAAJ,EAAuC;AACrC,YAAIX,WAAWY,QAAQF,UAAUG,KAAlB,CAAf;AACA,YAAIH,UAAUI,SAAd,EAAyB;AACvBd,qBAAWU,UAAUI,SAAV,CAAoBJ,UAAUG,KAA9B,CAAX;AACD;AACD,aAAKT,QAAL,CAAc,EAAEJ,kBAAF,EAAd;AACD;AACF;;;6BAmBQ;AAAA,mBAUH,KAAKK,KAVF;AAAA,UAELU,SAFK,UAELA,SAFK;AAAA,UAGLC,SAHK,UAGLA,SAHK;AAAA,UAILC,IAJK,UAILA,IAJK;AAAA,UAKLC,KALK,UAKLA,KALK;AAAA,UAMLC,QANK,UAMLA,QANK;AAAA,UAOLC,WAPK,UAOLA,WAPK;AAAA,UAQLP,KARK,UAQLA,KARK;AAAA,UASFQ,IATE;;AAYP,UAAMC,sBAAsB,0BAAG;AAC7B,wBAAgB,IADa;AAE7B,gCAAwB,KAAKvB,KAAL,CAAWC;AAFN,OAAH,CAA5B;;AAKA,UAAMuB,sBAAsB,0BAAG;AAC7B,wBAAgB,IADa;AAE7B,gCAAwB,KAAKxB,KAAL,CAAWC;AAFN,OAAH,CAA5B;;AAKA,UAAMwB,kBAAmB,KAAKzB,KAAL,CAAWE,SAAX,IAAwB,CAAC,KAAKF,KAAL,CAAWC,QAArC,GAAiDoB,WAAjD,GAA+D,IAAvF;;AAEA,aACE;AAAA;AAAA,UAAK,WAAU,kBAAf;AACE;AACE,qBAAW,0BAAG,CAAC,OAAD,EAAUL,SAAV,CAAH,CADb;AAEE,gBAAME,IAFR;AAGE,gBAAK,MAHP;AAIE,kBAAQ,KAAKf,UAJf;AAKE,oBAAUiB,QALZ;AAME,mBAAS,KAAKZ,WANhB;AAOE,uBAAaiB;AAPf,UADF;AAUE;AAAA;AAAA,YAAO,WAAWF,mBAAlB,EAAuC,SAASL,IAAhD;AACGC;AADH,SAVF;AAaE;AAAA;AAAA,YAAK,WAAWK,mBAAhB;AACGP;AADH;AAbF,OADF;AAmBD;;;;;;AAzFGlB,S,CAMG2B,S,GAAY;AACjBV,aAAW,oBAAUW,MADJ;AAEjBV,aAAW,oBAAUW,IAFJ;AAGjBV,QAAM,oBAAUS,MAHC;AAIjBR,SAAO,oBAAUQ,MAJA;AAKjBpB,UAAQ,oBAAUsB,IALD;AAMjBT,YAAU,oBAAUS,IANH;AAOjBnB,WAAS,oBAAUmB,IAPF;AAQjBR,eAAa,oBAAUM,MARN;AASjBZ,aAAW,oBAAUc,IATJ;AAUjBf,SAAO,oBAAUgB;AAVA,C;kBAsFN/B,S","file":"TextInput.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nclass TextInput extends Component {\n  state = {\n    hasValue: false,\n    isFocused: false\n  }\n\n  static propTypes = {\n    className: PropTypes.string,\n    errorText: PropTypes.node,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    placeholder: PropTypes.string,\n    validator: PropTypes.func,\n    value: PropTypes.any\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.hasOwnProperty('value')) {\n      let hasValue = Boolean(nextProps.value);\n      if (nextProps.validator) {\n        hasValue = nextProps.validator(nextProps.value);\n      }\n      this.setState({ hasValue })\n    }\n  }\n\n  handleBlur = (e) => {\n    this.setState({ isFocused: false })\n    if (this.props.onBlur) {\n      this.props.onBlur(e);\n    }\n  }\n\n  handleFocus = (e) => {\n    if (this.props.disabled) {\n      return\n    }\n    this.setState({ isFocused: true });\n    if (this.props.onFocus) {\n      this.props.onFocus(e);\n    }\n  }\n\n  render() {\n    const {\n      className,\n      errorText,\n      name,\n      label,\n      onChange,\n      placeholder,\n      value,\n      ...rest\n    } = this.props;\n\n    const inputLabelClassName = cx({\n      'input__label': true,\n      'input__label--active': this.state.hasValue\n    })\n\n    const inputErrorClassName = cx({\n      'input__error': true,\n      'input__error--active': this.state.hasValue\n    })\n\n    const showPlaceholder = (this.state.isFocused && !this.state.hasValue) ? placeholder : null;\n\n    return (\n      <div className=\"input__container\">\n        <input\n          className={cx(['input', className])}\n          name={name}\n          type=\"text\"\n          onBlur={this.handleBlur}\n          onChange={onChange}\n          onFocus={this.handleFocus}\n          placeholder={showPlaceholder}\n        />\n        <label className={inputLabelClassName} htmlFor={name}>\n          {label}\n        </label>\n        <div className={inputErrorClassName}>\n          {errorText}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TextInput;\n"]}