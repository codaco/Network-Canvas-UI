{"version":3,"sources":["../../../src/components/Inputs/TextInput.js"],"names":["TextInput","state","hasValue","isFocused","handleBlur","e","setState","props","onBlur","handleFocus","disabled","onFocus","handleKeyDown","isNumericOnly","metaKey","key","which","test","String","fromCharCode","preventDefault","onKeyDown","nextProps","hasOwnProperty","Boolean","value","validator","className","errorText","name","label","onChange","placeholder","rest","showPlaceholder","propTypes","string","node","bool","func","any"],"mappings":"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","file":"TextInput.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport InputLabel from './InputLabel';\n\nclass TextInput extends Component {\n  static propTypes = {\n    className: PropTypes.string,\n    errorText: PropTypes.node,\n    disabled: PropTypes.bool,\n    name: PropTypes.string,\n    isNumericOnly: PropTypes.bool,\n    label: PropTypes.string,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    placeholder: PropTypes.string,\n    validator: PropTypes.func,\n    value: PropTypes.any,\n  }\n\n  state = {\n    hasValue: false,\n    isFocused: false,\n  }\n\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.hasOwnProperty('value')) {\n      let hasValue = Boolean(nextProps.value);\n      if (nextProps.validator) {\n        hasValue = nextProps.validator(nextProps.value);\n      }\n      this.setState({ hasValue });\n    }\n  }\n\n  handleBlur = (e) => {\n    this.setState({ isFocused: false });\n    if (this.props.onBlur) {\n      this.props.onBlur(e);\n    }\n  }\n\n  handleFocus = (e) => {\n    if (this.props.disabled) {\n      return;\n    }\n    this.setState({ isFocused: true });\n    if (this.props.onFocus) {\n      this.props.onFocus(e);\n    }\n  }\n\n  handleKeyDown = (e) => {\n    if (this.props.isNumericOnly) {\n      if (!(\n        e.metaKey || // cmd/ctrl\n        e.key in ['ArrowRight', 'ArrowLeft'] || // arrow keys\n        e.which === 8 || // delete key\n        /[0-9]/.test(String.fromCharCode(e.which)) // numbers\n      )) {\n        e.preventDefault();\n      }\n    }\n    this.props.onKeyDown && this.props.onKeyDown(e);\n  }\n\n  render() {\n    const {\n      className,\n      errorText,\n      name,\n      label,\n      onChange,\n      isNumericOnly,\n      placeholder,\n      value,\n      ...rest\n    } = this.props;\n\n    const showPlaceholder = (this.state.isFocused && !this.state.hasValue) ? placeholder : null;\n\n    return (\n      <div className=\"input__container text__container\">\n        <input\n          className={cx(['text', className])}\n          name={name}\n          type={isNumericOnly ? 'tel' : 'text'}\n          onBlur={this.handleBlur}\n          onChange={onChange}\n          onFocus={this.handleFocus}\n          onKeyDown={this.handleKeyDown}\n          placeholder={showPlaceholder}\n          {...rest}\n        />\n        <InputLabel\n          className={'text__label'}\n          active={this.state.hasValue}\n          name={name}\n          label={label}\n          errorText={errorText}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TextInput;\n"]}