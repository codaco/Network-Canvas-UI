{"version":3,"sources":["../../../src/components/Inputs/ToggleGroup.js"],"names":["isChecked","value","option","ToggleGroup","props","options","colors","label","name","errorText","toggleComponent","optionsWithColor","index","ToggleComponent","color","e","checked","onOptionClick","propTypes","node","string","func","any","array","isRequired","oneOf"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,YAAY,SAAZA,SAAY,CAACC,KAAD,EAAQC,MAAR;AAAA,SAAoBD,QAAQ,CAAC,CAACA,MAAMC,MAAN,CAAV,GAA0B,KAA9C;AAAA,CAAlB;;IAEMC,W;;;;;;;;;;;6BAYK;AAAA;;AAAA,mBASH,KAAKC,KATF;AAAA,UAELC,OAFK,UAELA,OAFK;AAAA,UAGLC,MAHK,UAGLA,MAHK;AAAA,UAILC,KAJK,UAILA,KAJK;AAAA,UAKLC,IALK,UAKLA,IALK;AAAA,UAMLP,KANK,UAMLA,KANK;AAAA,UAOLQ,SAPK,UAOLA,SAPK;AAAA,UAQLC,eARK,UAQLA,eARK;;;AAWP,UAAMC,mBACJL,SAAS,iBAAID,OAAJ,EAAaC,MAAb,CAAT,GAAgC,iBAAID,OAAJ,EAAa,UAACH,MAAD,EAASU,KAAT;AAAA,eAAmB,CAACV,MAAD,EAASU,KAAT,CAAnB;AAAA,OAAb,CADlC;;AAIA,UAAIC,uCAAJ;AACA,UAAIH,oBAAoB,UAAxB,EAAoC;AAClCG;AACD,OAFD,MAEO,IAAIH,oBAAoB,SAAxB,EAAmC;AACxCG;AACD;;AAED,aACE;AAAA;AAAA,UAAK,WAAU,cAAf;AACE;AACE,gBAAML,IADR;AAEE,iBAAOD,KAFT;AAGE,qBAAWE;AAHb,UADF;AAME;AAAA;AAAA,YAAK,WAAU,sBAAf;AACG,2BAAIE,gBAAJ,EAAsB;AAAA;AAAA,gBAAET,MAAF;AAAA,gBAAUY,KAAV;;AAAA,mBACrB,8BAAC,eAAD;AACE,mBAAKZ,MADP;AAEE,oBAAMM,IAFR;AAGE,qBAAON,MAHT;AAIE,qBAAOY,SAAS,IAJlB;AAKE,uBAAS,iBAACC,CAAD,EAAIC,OAAJ;AAAA,uBAAgB,OAAKZ,KAAL,CAAWa,aAAX,CAAyBF,CAAzB,EAA4BC,OAA5B,EAAqCd,MAArC,CAAhB;AAAA,eALX;AAME,uBAASF,UAAUC,KAAV,EAAiBC,MAAjB;AANX,cADqB;AAAA,WAAtB;AADH;AANF,OADF;AAqBD;;;;;;AAvDGC,W,CACGe,S,GAAY;AACjBT,aAAW,oBAAUU,IADJ;AAEjBX,QAAM,oBAAUY,MAFC;AAGjBb,SAAO,oBAAUa,MAHA;AAIjBH,iBAAe,oBAAUI,IAJR;AAKjBpB,SAAO,oBAAUqB,GALA;AAMjBjB,WAAS,oBAAUkB,KAAV,CAAgBC,UANR;AAOjBlB,UAAQ,oBAAUiB,KAPD;AAQjBb,mBAAiB,oBAAUe,KAAV,CAAgB,CAAC,QAAD,EAAW,UAAX,EAAuB,SAAvB,CAAhB;AARA,C;kBAyDNtB,W","file":"ToggleGroup.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { map, zip } from 'lodash';\n\nimport ContextInput from './ContextInput';\nimport Checkbox from './Checkbox';\nimport ToggleInput from './ToggleInput';\nimport InputLabel from './InputLabel';\n\nconst isChecked = (value, option) => (value ? !!value[option] : false);\n\nclass ToggleGroup extends Component {\n  static propTypes = {\n    errorText: PropTypes.node,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    onOptionClick: PropTypes.func,\n    value: PropTypes.any,\n    options: PropTypes.array.isRequired,\n    colors: PropTypes.array,\n    toggleComponent: PropTypes.oneOf(['toggle', 'checkbox', 'context']),\n  }\n\n  render() {\n    const {\n      options,\n      colors,\n      label,\n      name,\n      value,\n      errorText,\n      toggleComponent,\n    } = this.props;\n\n    const optionsWithColor = (\n      colors ? zip(options, colors) : map(options, (option, index) => [option, index])\n    );\n\n    let ToggleComponent = ToggleInput;\n    if (toggleComponent === 'checkbox') {\n      ToggleComponent = Checkbox;\n    } else if (toggleComponent === 'context') {\n      ToggleComponent = ContextInput;\n    }\n\n    return (\n      <div className=\"toggle-group\">\n        <InputLabel\n          name={name}\n          label={label}\n          errorText={errorText}\n        />\n        <div className=\"toggle-group__inputs\">\n          {map(optionsWithColor, ([option, color]) => (\n            <ToggleComponent\n              key={option}\n              name={name}\n              label={option}\n              color={color || null}\n              onCheck={(e, checked) => this.props.onOptionClick(e, checked, option)}\n              checked={isChecked(value, option)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ToggleGroup;\n"]}