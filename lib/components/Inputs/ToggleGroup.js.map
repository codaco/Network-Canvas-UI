{"version":3,"sources":["../../../src/components/Inputs/ToggleGroup.js"],"names":["isChecked","value","option","ToggleGroup","options","colors","label","name","errorText","tooltip","toggleComponent","onOptionClick","optionsWithColor","index","ToggleComponent","color","e","checked","propTypes","node","string","func","any","array","isRequired","oneOf"],"mappings":";;;;;;ypBAAA;;AAEA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,YAAY,SAAZA,SAAY,CAACC,KAAD,EAAQC,MAAR;AAAA,SAAoBD,QAAQ,CAAC,CAACA,MAAMC,MAAN,CAAV,GAA0B,KAA9C;AAAA,CAAlB;;AAEA,IAAMC,cAAc,SAAdA,WAAc,OAUd;AAAA,MATJC,OASI,QATJA,OASI;AAAA,MARJC,MAQI,QARJA,MAQI;AAAA,MAPJC,KAOI,QAPJA,KAOI;AAAA,MANJC,IAMI,QANJA,IAMI;AAAA,MALJN,KAKI,QALJA,KAKI;AAAA,MAJJO,SAII,QAJJA,SAII;AAAA,MAHJC,OAGI,QAHJA,OAGI;AAAA,MAFJC,eAEI,QAFJA,eAEI;AAAA,MADJC,aACI,QADJA,aACI;;AACJ,MAAMC,mBACJP,SAAS,iBAAID,OAAJ,EAAaC,MAAb,CAAT,GAAgC,iBAAID,OAAJ,EAAa,UAACF,MAAD,EAASW,KAAT;AAAA,WAAmB,CAACX,MAAD,EAASW,KAAT,CAAnB;AAAA,GAAb,CADlC;;AAIA,MAAIC,uCAAJ;AACA,MAAIJ,oBAAoB,UAAxB,EAAoC;AAClCI;AACD,GAFD,MAEO,IAAIJ,oBAAoB,SAAxB,EAAmC;AACxCI;AACD;;AAED,SACE;AAAA;AAAA,MAAK,WAAU,cAAf;AACE;AACE,YAAMP,IADR;AAEE,aAAOD,KAFT;AAGE,iBAAWE,SAHb;AAIE,eAASC;AAJX,MADF;AAOE;AAAA;AAAA,QAAK,WAAU,sBAAf;AACG,uBAAIG,gBAAJ,EAAsB;AAAA;AAAA,YAAEV,MAAF;AAAA,YAAUa,KAAV;;AAAA,eACrB,8BAAC,eAAD;AACE,eAAKb,MADP;AAEE,gBAAMK,IAFR;AAGE,iBAAOL,MAHT;AAIE,iBAAOa,SAAS,IAJlB;AAKE,mBAAS,iBAACC,CAAD,EAAIC,OAAJ;AAAA,mBAAgBN,cAAcK,CAAd,EAAiBC,OAAjB,EAA0Bf,MAA1B,CAAhB;AAAA,WALX;AAME,mBAASF,UAAUC,KAAV,EAAiBC,MAAjB;AANX,UADqB;AAAA,OAAtB;AADH;AAPF,GADF;AAsBD,CA5CD;;AA8CAC,YAAYe,SAAZ,GAAwB;AACtBV,aAAW,oBAAUW,IADC;AAEtBV,WAAS,oBAAUW,MAFG;AAGtBb,QAAM,oBAAUa,MAHM;AAItBd,SAAO,oBAAUc,MAJK;AAKtBT,iBAAe,oBAAUU,IALH;AAMtBpB,SAAO,oBAAUqB,GANK;AAOtBlB,WAAS,oBAAUmB,KAAV,CAAgBC,UAPH;AAQtBnB,UAAQ,oBAAUkB,KARI;AAStBb,mBAAiB,oBAAUe,KAAV,CAAgB,CAAC,QAAD,EAAW,UAAX,EAAuB,SAAvB,CAAhB;AATK,CAAxB;;kBAYetB,W","file":"ToggleGroup.js","sourcesContent":["/* eslint-disable react/require-default-props */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { map, zip } from 'lodash';\n\nimport ContextInput from './ContextInput';\nimport Checkbox from './Checkbox';\nimport ToggleInput from './ToggleInput';\nimport InputLabel from './InputLabel';\n\nconst isChecked = (value, option) => (value ? !!value[option] : false);\n\nconst ToggleGroup = ({\n  options,\n  colors,\n  label,\n  name,\n  value,\n  errorText,\n  tooltip,\n  toggleComponent,\n  onOptionClick,\n}) => {\n  const optionsWithColor = (\n    colors ? zip(options, colors) : map(options, (option, index) => [option, index])\n  );\n\n  let ToggleComponent = ToggleInput;\n  if (toggleComponent === 'checkbox') {\n    ToggleComponent = Checkbox;\n  } else if (toggleComponent === 'context') {\n    ToggleComponent = ContextInput;\n  }\n\n  return (\n    <div className=\"toggle-group\">\n      <InputLabel\n        name={name}\n        label={label}\n        errorText={errorText}\n        tooltip={tooltip}\n      />\n      <div className=\"toggle-group__inputs\">\n        {map(optionsWithColor, ([option, color]) => (\n          <ToggleComponent\n            key={option}\n            name={name}\n            label={option}\n            color={color || null}\n            onCheck={(e, checked) => onOptionClick(e, checked, option)}\n            checked={isChecked(value, option)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nToggleGroup.propTypes = {\n  errorText: PropTypes.node,\n  tooltip: PropTypes.string,\n  name: PropTypes.string,\n  label: PropTypes.string,\n  onOptionClick: PropTypes.func,\n  value: PropTypes.any,\n  options: PropTypes.array.isRequired,\n  colors: PropTypes.array,\n  toggleComponent: PropTypes.oneOf(['toggle', 'checkbox', 'context']),\n};\n\nexport default ToggleGroup;\n"]}