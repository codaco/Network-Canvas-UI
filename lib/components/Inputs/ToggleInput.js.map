{"version":3,"sources":["../../../src/components/Inputs/ToggleInput.js"],"names":["ToggleInput","state","isChecked","handleCheck","event","props","onCheck","checked","setState","nextProps","hasCheckedProp","hasOwnProperty","hasNewDefaultProp","defaultChecked","checkbox","className","color","errorText","name","label","value","rest","toggleButtonClassName","toggle__button","propTypes","bool","string","oneOf","Object","keys","node","onBlur","func","onChange","onFocus","validator","any"],"mappings":";;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;;;+eAPA;;IASMA,W;;;;;;;;;;;;;;gMAiBJC,K,GAAQ;AACNC,iBAAW;AADL,K,QA8BRC,W,GAAc,UAACC,KAAD,EAAW;AACvB,UAAI,MAAKC,KAAL,CAAWC,OAAf,EAAwB;AACtB,cAAKD,KAAL,CAAWC,OAAX,CAAmBF,KAAnB,EAA0B,MAAKF,SAAL,EAA1B;AACD;AACF,K;;;;;yCA9BoB;AAAA,UACXK,OADW,GACC,KAAKF,KADN,CACXE,OADW;;AAEnB,UAAIA,OAAJ,EAAa;AACX,aAAKC,QAAL,CAAc;AACZN,qBAAW;AADC,SAAd;AAGD;AACF;;;8CAEyBO,S,EAAW;AACnC,UAAMC,iBAAiBD,UAAUE,cAAV,CAAyB,SAAzB,CAAvB;AACA,UAAMC,oBACHH,UAAUE,cAAV,CAAyB,gBAAzB,KACAF,UAAUI,cAAV,KAA6B,KAAKR,KAAL,CAAWQ,cAF3C;;AAIA,UAAIH,kBAAkBE,iBAAtB,EAAyC;AACvC,YAAMV,YAAYO,UAAUF,OAAV,IAAqBE,UAAUI,cAA/B,IAAiD,KAAnE;;AAEA,aAAKL,QAAL,CAAc,EAAEN,oBAAF,EAAd;AACD;AACF;;;gCAEW;AACV,aAAO,KAAKY,QAAL,CAAcP,OAArB;AACD;;;6BAQQ;AAAA;;AAAA,mBAYH,KAAKF,KAZF;AAAA,UAELE,OAFK,UAELA,OAFK;AAAA,UAGLQ,SAHK,UAGLA,SAHK;AAAA,UAILC,KAJK,UAILA,KAJK;AAAA,UAKLC,SALK,UAKLA,SALK;AAAA,UAMLC,IANK,UAMLA,IANK;AAAA,UAOLC,KAPK,UAOLA,KAPK;AAAA,UAQLb,OARK,UAQLA,OARK;AAAA,UASLJ,SATK,UASLA,SATK;AAAA,UAULkB,KAVK,UAULA,KAVK;AAAA,UAWFC,IAXE;;AAcP,UAAMC,wBAAwB;AAC5BC,wBAAgB;AADY,8BAERP,KAFQ,EAEE,CAAC,CAACA,KAFJ,EAA9B;;AAKA,aACE;AAAA;AAAA,UAAK,WAAU,mBAAf;AACE;AACE,qBAAW,0BAAG,CAAC,QAAD,EAAWD,SAAX,CAAH,CADb;AAEE,gBAAMG,IAFR;AAGE,gBAAK,UAHP;AAIE,eAAK,aAACJ,QAAD,EAAc;AAAE,mBAAKA,QAAL,GAAgBA,QAAhB;AAA2B,WAJlD;AAKE,mBAAS,KAAKb,KAAL,CAAWC,SALtB;AAME,oBAAU,KAAKC,WANjB;AAOE,iBAAOiB;AAPT,WAQMC,IARN,EADF;AAWE;AAAA;AAAA,YAAK,WAAU,gBAAf;AACE,kDAAM,WAAWC,qBAAjB;AADF,SAXF;AAcE;AACE,gBAAMJ,IADR;AAEE,iBAAOC,KAFT;AAGE,qBAAWF;AAHb;AAdF,OADF;AAsBD;;;;;;AA9FGjB,W,CACGwB,S,GAAY;AACjBjB,WAAS,oBAAUkB,IADF;AAEjBV,aAAW,oBAAUW,MAFJ;AAGjBV,SAAO,oBAAUW,KAAV,CAAgBC,OAAOC,IAAP,2BAAhB,CAHU;AAIjBhB,kBAAgB,oBAAUY,IAJT;AAKjBR,aAAW,oBAAUa,IALJ;AAMjBZ,QAAM,oBAAUQ,MANC;AAOjBP,SAAO,oBAAUO,MAPA;AAQjBK,UAAQ,oBAAUC,IARD;AASjBC,YAAU,oBAAUD,IATH;AAUjB1B,WAAS,oBAAU0B,IAVF;AAWjBE,WAAS,oBAAUF,IAXF;AAYjBG,aAAW,oBAAUH,IAZJ;AAajBZ,SAAO,oBAAUgB;AAbA,C;kBAgGNpC,W","file":"ToggleInput.js","sourcesContent":["/* eslint-disable react/require-default-props */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport colorDict from '../colorDictionary';\nimport InputLabel from './InputLabel';\n\nclass ToggleInput extends Component {\n  static propTypes = {\n    checked: PropTypes.bool,\n    className: PropTypes.string,\n    color: PropTypes.oneOf(Object.keys(colorDict)),\n    defaultChecked: PropTypes.bool,\n    errorText: PropTypes.node,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func,\n    onCheck: PropTypes.func,\n    onFocus: PropTypes.func,\n    validator: PropTypes.func,\n    value: PropTypes.any,\n  }\n\n  state = {\n    isChecked: false,\n  }\n\n  componentWillMount() {\n    const { checked } = this.props;\n    if (checked) {\n      this.setState({\n        isChecked: true,\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const hasCheckedProp = nextProps.hasOwnProperty('checked');\n    const hasNewDefaultProp =\n      (nextProps.hasOwnProperty('defaultChecked') &&\n      (nextProps.defaultChecked !== this.props.defaultChecked));\n\n    if (hasCheckedProp || hasNewDefaultProp) {\n      const isChecked = nextProps.checked || nextProps.defaultChecked || false;\n\n      this.setState({ isChecked });\n    }\n  }\n\n  isChecked() {\n    return this.checkbox.checked;\n  }\n\n  handleCheck = (event) => {\n    if (this.props.onCheck) {\n      this.props.onCheck(event, this.isChecked());\n    }\n  }\n\n  render() {\n    const {\n      checked, // eslint-disable-line\n      className,\n      color,\n      errorText,\n      name,\n      label,\n      onCheck, // eslint-disable-line\n      isChecked, // eslint-disable-line\n      value,\n      ...rest\n    } = this.props;\n\n    const toggleButtonClassName = cx({\n      toggle__button: true,\n      [`toggle__button--${color}`]: !!color,\n    });\n\n    return (\n      <div className=\"toggle__container\">\n        <input\n          className={cx(['toggle', className])}\n          name={name}\n          type=\"checkbox\"\n          ref={(checkbox) => { this.checkbox = checkbox; }}\n          checked={this.state.isChecked}\n          onChange={this.handleCheck}\n          value={value}\n          {...rest}\n        />\n        <div className=\"toggle__slider\">\n          <span className={toggleButtonClassName} />\n        </div>\n        <InputLabel\n          name={name}\n          label={label}\n          errorText={errorText}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ToggleInput;\n"]}