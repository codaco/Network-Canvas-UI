{"version":3,"sources":["../../../src/components/Inputs/ToggleInput.js"],"names":["ToggleInput","state","isChecked","handleCheck","event","isInputChecked","props","onCheck","checked","setState","nextProps","hasCheckedProp","hasOwnProperty","hasNewDefaultProp","defaultChecked","refs","checkbox","className","errorText","name","label","value","rest","propTypes","bool","string","node","onBlur","func","onChange","onFocus","validator","any"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;;;IAEMA,W;;;;;;;;;;;;;;gMACJC,K,GAAQ;AACNC,iBAAW;AADL,K,QA2CRC,W,GAAc,UAACC,KAAD,EAAQC,cAAR,EAA2B;AACvC,UAAI,MAAKC,KAAL,CAAWC,OAAf,EAAwB;AACtB,cAAKD,KAAL,CAAWC,OAAX,CAAmBH,KAAnB,EAA0B,MAAKF,SAAL,EAA1B;AACD;AACF,K;;;;;yCA9BoB;AAAA,UACXM,OADW,GACC,KAAKF,KADN,CACXE,OADW;;AAEnB,UAAIA,OAAJ,EAAa;AACX,aAAKC,QAAL,CAAc;AACZP,qBAAW;AADC,SAAd;AAGD;AACF;;;8CAEyBQ,S,EAAW;AACnC,UAAMC,iBAAiBD,UAAUE,cAAV,CAAyB,SAAzB,CAAvB;AACA,UAAMC,oBACHH,UAAUE,cAAV,CAAyB,gBAAzB,KACAF,UAAUI,cAAV,KAA6B,KAAKR,KAAL,CAAWQ,cAF3C;;AAIA,UAAIH,kBAAkBE,iBAAtB,EAAyC;AACvC,YAAMX,YAAYQ,UAAUF,OAAV,IAAqBE,UAAUI,cAA/B,IAAiD,KAAnE;;AAEA,aAAKL,QAAL,CAAc,EAAEP,oBAAF,EAAd;AACD;AACF;;;gCAEW;AACV,aAAO,KAAKa,IAAL,CAAUC,QAAV,CAAmBR,OAA1B;AACD;;;6BAQQ;AAAA,mBAWH,KAAKF,KAXF;AAAA,UAELE,OAFK,UAELA,OAFK;AAAA,UAGLS,SAHK,UAGLA,SAHK;AAAA,UAILC,SAJK,UAILA,SAJK;AAAA,UAKLC,IALK,UAKLA,IALK;AAAA,UAMLC,KANK,UAMLA,KANK;AAAA,UAOLb,OAPK,UAOLA,OAPK;AAAA,UAQLL,SARK,UAQLA,SARK;AAAA,UASLmB,KATK,UASLA,KATK;AAAA,UAUFC,IAVE;;AAaP,aACE;AAAA;AAAA;AACE,qBAAU;AADZ;AAGE;AAAA;AAAA,YAAK,WAAU,kBAAf;AACE;AACE,uBAAW,0BAAG,CAAC,UAAD,EAAaL,SAAb,CAAH,CADb;AAEE,kBAAME,IAFR;AAGE,kBAAK,UAHP;AAIE,iBAAI,UAJN;AAKE,qBAAS,KAAKlB,KAAL,CAAWC,SALtB;AAME,sBAAU,KAAKC,WANjB;AAOE,mBAAOkB;AAPT,aAQMC,IARN,EADF;AAWE,kDAAM,WAAU,kBAAhB;AAXF,SAHF;AAgBE;AACE,gBAAMH,IADR;AAEE,iBAAOC,KAFT;AAGE,qBAAWF;AAHb;AAhBF,OADF;AAwBD;;;;;;AAvFGlB,W,CAKGuB,S,GAAY;AACjBf,WAAS,oBAAUgB,IADF;AAEjBP,aAAW,oBAAUQ,MAFJ;AAGjBP,aAAW,oBAAUQ,IAHJ;AAIjBP,QAAM,oBAAUM,MAJC;AAKjBL,SAAO,oBAAUK,MALA;AAMjBE,UAAQ,oBAAUC,IAND;AAOjBC,YAAU,oBAAUD,IAPH;AAQjBE,WAAS,oBAAUF,IARF;AASjBG,aAAW,oBAAUH,IATJ;AAUjBP,SAAO,oBAAUW;AAVA,C;kBAqFNhC,W","file":"ToggleInput.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport InputLabel from './InputLabel';\n\nclass ToggleInput extends Component {\n  state = {\n    isChecked: false\n  }\n\n  static propTypes = {\n    checked: PropTypes.bool,\n    className: PropTypes.string,\n    errorText: PropTypes.node,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    validator: PropTypes.func,\n    value: PropTypes.any\n  }\n\n  componentWillMount() {\n    const { checked } = this.props;\n    if (checked) {\n      this.setState({\n        isChecked: true\n      })\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const hasCheckedProp = nextProps.hasOwnProperty('checked');\n    const hasNewDefaultProp =\n      (nextProps.hasOwnProperty('defaultChecked') &&\n      (nextProps.defaultChecked !== this.props.defaultChecked));\n\n    if (hasCheckedProp || hasNewDefaultProp) {\n      const isChecked = nextProps.checked || nextProps.defaultChecked || false;\n\n      this.setState({ isChecked });\n    }\n  }\n\n  isChecked() {\n    return this.refs.checkbox.checked;\n  }\n\n  handleCheck = (event, isInputChecked) => {\n    if (this.props.onCheck) {\n      this.props.onCheck(event, this.isChecked());\n    }\n  }\n\n  render() {\n    const {\n      checked, // eslint-disable-line no-unused-vars\n      className,\n      errorText,\n      name,\n      label,\n      onCheck, // eslint-disable-line no-unused-vars\n      isChecked, // eslint-disable-line no-unused-vars\n      value,\n      ...rest\n    } = this.props;\n\n    return (\n      <div\n        className=\"checkbox__container checkbox__container--toggle\"\n      >\n        <div className=\"checkbox__toggle\">\n          <input\n            className={cx(['checkbox', className])}\n            name={name}\n            type=\"checkbox\"\n            ref=\"checkbox\"\n            checked={this.state.isChecked}\n            onChange={this.handleCheck}\n            value={value}\n            {...rest}\n          />\n          <span className=\"checkbox__slider\" />\n        </div>\n        <InputLabel\n          name={name}\n          label={label}\n          errorText={errorText}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ToggleInput;\n"]}