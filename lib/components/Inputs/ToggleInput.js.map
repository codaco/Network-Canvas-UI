{"version":3,"sources":["../../../src/components/Inputs/ToggleInput.js"],"names":["ToggleInput","state","isChecked","handleCheck","event","props","onCheck","checked","setState","nextProps","hasCheckedProp","hasOwnProperty","hasNewDefaultProp","defaultChecked","checkbox","className","containerClassName","color","errorText","inline","tooltip","name","label","value","rest","toggleButtonClassName","toggle__button","toggleContainerClassName","toggle__container","propTypes","bool","string","oneOf","Object","keys","node","onBlur","func","onChange","onFocus","validator","any"],"mappings":";;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;;;;;;;;;+eARA;;IAUMA,W;;;;;;;;;;;;;;gMAoBJC,K,GAAQ;AACNC,iBAAW;AADL,K,QA8BRC,W,GAAc,UAACC,KAAD,EAAW;AACvB,UAAI,MAAKC,KAAL,CAAWC,OAAf,EAAwB;AACtB,cAAKD,KAAL,CAAWC,OAAX,CAAmBF,KAAnB,EAA0B,MAAKF,SAAL,EAA1B;AACD;AACF,K;;;;;yCA9BoB;AAAA,UACXK,OADW,GACC,KAAKF,KADN,CACXE,OADW;;AAEnB,UAAIA,OAAJ,EAAa;AACX,aAAKC,QAAL,CAAc;AACZN,qBAAW;AADC,SAAd;AAGD;AACF;;;8CAEyBO,S,EAAW;AACnC,UAAMC,iBAAiBD,UAAUE,cAAV,CAAyB,SAAzB,CAAvB;AACA,UAAMC,oBACJH,UAAUE,cAAV,CAAyB,gBAAzB,KACAF,UAAUI,cAAV,KAA6B,KAAKR,KAAL,CAAWQ,cAF1C;;AAIA,UAAIH,kBAAkBE,iBAAtB,EAAyC;AACvC,YAAMV,YAAYO,UAAUF,OAAV,IAAqBE,UAAUI,cAA/B,IAAiD,KAAnE;;AAEA,aAAKL,QAAL,CAAc,EAAEN,oBAAF,EAAd;AACD;AACF;;;gCAEW;AACV,aAAO,KAAKY,QAAL,CAAcP,OAArB;AACD;;;6BAQQ;AAAA;;AAAA,mBAeH,KAAKF,KAfF;AAAA,UAELE,OAFK,UAELA,OAFK;AAAA,UAGLQ,SAHK,UAGLA,SAHK;AAAA,UAILC,kBAJK,UAILA,kBAJK;AAAA,UAKLC,KALK,UAKLA,KALK;AAAA,UAMLC,SANK,UAMLA,SANK;AAAA,UAOLC,MAPK,UAOLA,MAPK;AAAA,UAQLC,OARK,UAQLA,OARK;AAAA,UASLC,IATK,UASLA,IATK;AAAA,UAULC,KAVK,UAULA,KAVK;AAAA,UAWLhB,OAXK,UAWLA,OAXK;AAAA,UAYLJ,SAZK,UAYLA,SAZK;AAAA,UAaLqB,KAbK,UAaLA,KAbK;AAAA,UAcFC,IAdE;;AAiBP,UAAMC,wBAAwB;AAC5BC,wBAAgB;AADY,8BAERT,KAFQ,EAEE,CAAC,CAACA,KAFJ,EAA9B;;AAKA,UAAMU,2BAA2B,0BAAG;AAClCC,2BAAmB,IADe;AAElC,qCAA6B,CAAC,CAACT;AAFG,OAAH,EAG9B,CAACH,kBAAD,CAH8B,CAAjC;;AAKA,aACE;AAAA;AAAA,UAAK,WAAWW,wBAAhB;AACE,8DAAY,MAAMN,IAAlB,EAAwB,OAAOC,KAA/B,EAAsC,WAAWJ,SAAjD,EAA4D,SAASE,OAArE,GADF;AAEE;AACE,qBAAW,0BAAG,CAAC,QAAD,EAAWL,SAAX,CAAH,CADb;AAEE,gBAAMM,IAFR;AAGE,gBAAK,UAHP;AAIE,eAAK,aAACP,QAAD,EAAc;AACjB,mBAAKA,QAAL,GAAgBA,QAAhB;AACD,WANH;AAOE,mBAAS,KAAKb,KAAL,CAAWC,SAPtB;AAQE,oBAAU,KAAKC,WARjB;AASE,iBAAOoB;AATT,WAUMC,IAVN,EAFF;AAcE;AAAA;AAAA,YAAK,WAAU,gBAAf;AACE,kDAAM,WAAWC,qBAAjB;AADF;AAdF,OADF;AAoBD;;;;;;AAvGGzB,W,CACG6B,S,GAAY;AACjBtB,WAAS,oBAAUuB,IADF;AAEjBf,aAAW,oBAAUgB,MAFJ;AAGjBf,sBAAoB,oBAAUe,MAHb;AAIjBd,SAAO,oBAAUe,KAAV,CAAgBC,OAAOC,IAAP,mBAAhB,CAJU;AAKjBrB,kBAAgB,oBAAUiB,IALT;AAMjBZ,aAAW,oBAAUiB,IANJ;AAOjBhB,UAAQ,oBAAUW,IAPD;AAQjBV,WAAS,oBAAUW,MARF;AASjBV,QAAM,oBAAUU,MATC;AAUjBT,SAAO,oBAAUS,MAVA;AAWjBK,UAAQ,oBAAUC,IAXD;AAYjBC,YAAU,oBAAUD,IAZH;AAajB/B,WAAS,oBAAU+B,IAbF;AAcjBE,WAAS,oBAAUF,IAdF;AAejBG,aAAW,oBAAUH,IAfJ;AAgBjBd,SAAO,oBAAUkB;AAhBA,C;kBAyGNzC,W","file":"ToggleInput.js","sourcesContent":["/* eslint-disable react/require-default-props */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport InputLabel from './InputLabel';\n\nimport colors from '../../styles/global/_default.scss';\n\nclass ToggleInput extends Component {\n  static propTypes = {\n    checked: PropTypes.bool,\n    className: PropTypes.string,\n    containerClassName: PropTypes.string,\n    color: PropTypes.oneOf(Object.keys(colors)),\n    defaultChecked: PropTypes.bool,\n    errorText: PropTypes.node,\n    inline: PropTypes.bool,\n    tooltip: PropTypes.string,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func,\n    onCheck: PropTypes.func,\n    onFocus: PropTypes.func,\n    validator: PropTypes.func,\n    value: PropTypes.any,\n  };\n\n  state = {\n    isChecked: false,\n  };\n\n  componentWillMount() {\n    const { checked } = this.props;\n    if (checked) {\n      this.setState({\n        isChecked: true,\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const hasCheckedProp = nextProps.hasOwnProperty('checked');\n    const hasNewDefaultProp =\n      nextProps.hasOwnProperty('defaultChecked') &&\n      nextProps.defaultChecked !== this.props.defaultChecked;\n\n    if (hasCheckedProp || hasNewDefaultProp) {\n      const isChecked = nextProps.checked || nextProps.defaultChecked || false;\n\n      this.setState({ isChecked });\n    }\n  }\n\n  isChecked() {\n    return this.checkbox.checked;\n  }\n\n  handleCheck = (event) => {\n    if (this.props.onCheck) {\n      this.props.onCheck(event, this.isChecked());\n    }\n  };\n\n  render() {\n    const {\n      checked, // eslint-disable-line\n      className,\n      containerClassName,\n      color,\n      errorText,\n      inline,\n      tooltip,\n      name,\n      label,\n      onCheck, // eslint-disable-line\n      isChecked, // eslint-disable-line\n      value,\n      ...rest\n    } = this.props;\n\n    const toggleButtonClassName = cx({\n      toggle__button: true,\n      [`toggle__button--${color}`]: !!color,\n    });\n\n    const toggleContainerClassName = cx({\n      toggle__container: true,\n      'toggle__container--inline': !!inline,\n    }, [containerClassName]);\n\n    return (\n      <div className={toggleContainerClassName}>\n        <InputLabel name={name} label={label} errorText={errorText} tooltip={tooltip} />\n        <input\n          className={cx(['toggle', className])}\n          name={name}\n          type=\"checkbox\"\n          ref={(checkbox) => {\n            this.checkbox = checkbox;\n          }}\n          checked={this.state.isChecked}\n          onChange={this.handleCheck}\n          value={value}\n          {...rest}\n        />\n        <div className=\"toggle__slider\">\n          <span className={toggleButtonClassName} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ToggleInput;\n"]}