{"version":3,"sources":["../../src/utils/scaleTextToFit.js"],"names":["textOutOfBounds","containerElement","textElement","containerBounds","getBoundingClientRect","textBounds","height","width","scaleIncrement","scaleTextToFit","element","setAttribute","text","textContent","innerHTML","document","createElement","appendChild","findFontSize","size","fontSize"],"mappings":";;;;;AAAA;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB,CAACC,gBAAD,EAAmBC,WAAnB,EAAmC;AACzD,MAAMC,kBAAkBF,iBAAiBG,qBAAjB,EAAxB;AACA,MAAMC,aAAaH,YAAYE,qBAAZ,EAAnB;AACA,SAAOC,WAAWC,MAAX,GAAoBH,gBAAgBG,MAApC,IAA8CD,WAAWE,KAAX,GAAmBJ,gBAAgBI,KAAxF;AACD,CAJD;;AAMA,IAAMC,iBAAiB,CAAvB;;AAEA;AACA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,OAAD,EAAa;AAClCA,UAAQC,YAAR,CAAqB,OAArB,EAA8B,qBAA9B;AACA,MAAMC,OAAOF,QAAQG,WAArB;AACAH,UAAQI,SAAR,GAAoB,EAApB;;AAEA,MAAMZ,cAAca,SAASC,aAAT,CAAuB,MAAvB,CAApB;AACAd,cAAYY,SAAZ,GAAwBF,IAAxB;AACAF,UAAQO,WAAR,CAAoBf,WAApB;;AAEA,MAAMgB,eAAe,SAAfA,YAAe,CAACC,IAAD,EAAU;AAC7BjB,gBAAYS,YAAZ,CAAyB,OAAzB,sCAAoEQ,IAApE;;AAEA,WAAO,CAACnB,gBAAgBU,OAAhB,EAAyBR,WAAzB,CAAD,GACLgB,aAAaC,OAAOX,cAApB,CADK,GAELW,OAAOX,cAFT;AAGD,GAND;;AAQA,MAAMY,WAAWF,aAAa,CAAb,CAAjB;;AAEAR,UAAQI,SAAR,GAAoBF,IAApB;AACAF,UAAQC,YAAR,CAAqB,OAArB,kBAA4CS,QAA5C;AACD,CArBD;;kBAuBeX,c","file":"scaleTextToFit.js","sourcesContent":["/* eslint-disable no-param-reassign */\n\nconst textOutOfBounds = (containerElement, textElement) => {\n  const containerBounds = containerElement.getBoundingClientRect();\n  const textBounds = textElement.getBoundingClientRect();\n  return textBounds.height > containerBounds.height || textBounds.width > containerBounds.width;\n};\n\nconst scaleIncrement = 1;\n\n// TODO move padding: 33% into stylesheet\nconst scaleTextToFit = (element) => {\n  element.setAttribute('style', 'position: relative;');\n  const text = element.textContent;\n  element.innerHTML = '';\n\n  const textElement = document.createElement('span');\n  textElement.innerHTML = text;\n  element.appendChild(textElement);\n\n  const findFontSize = (size) => {\n    textElement.setAttribute('style', `position: absolute; font-size: ${size}px;`);\n\n    return !textOutOfBounds(element, textElement) ?\n      findFontSize(size + scaleIncrement) :\n      size - scaleIncrement;\n  };\n\n  const fontSize = findFontSize(8);\n\n  element.innerHTML = text;\n  element.setAttribute('style', `font-size: ${fontSize}px; overflow: hidden;`);\n};\n\nexport default scaleTextToFit;\n"]}