{"version":3,"sources":["../../src/utils/scaleTextToFit.js"],"names":["textOutOfBounds","containerElement","textElement","containerBounds","getBoundingClientRect","textBounds","height","width","defaultOptions","increment","units","scaleTextToFit","element","options","unit","setAttribute","text","textContent","innerHTML","document","createElement","appendChild","findFontSize","size","fontSize"],"mappings":";;;;;;;;AAAA;;AAEA;AACA,IAAMA,kBAAkB,SAAlBA,eAAkB,CAACC,gBAAD,EAAmBC,WAAnB,EAAmC;AACzD,MAAMC,kBAAkBF,iBAAiBG,qBAAjB,EAAxB;AACA,MAAMC,aAAaH,YAAYE,qBAAZ,EAAnB;AACA,SACEC,WAAWC,MAAX,GAAoBH,gBAAgBG,MAApC,IACAD,WAAWE,KAAX,GAAmBJ,gBAAgBI,KAFrC;AAID,CAPD;;AASA,IAAMC,iBAAiB;AACrBC,aAAW,CADU;AAErBC,SAAO;AAFc,CAAvB;;AAKA;AACA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,OAAD,EAAUC,OAAV,EAAsB;AAAA,2CAIlCL,cAJkC,EAIfK,OAJe;AAAA,MAEzCJ,SAFyC,yBAEzCA,SAFyC;AAAA,MAGzCK,IAHyC,yBAGzCA,IAHyC;;AAM3CF,UAAQG,YAAR,CAAqB,OAArB,EAA8B,qBAA9B;AACA,MAAMC,OAAOJ,QAAQK,WAArB;AACAL,UAAQM,SAAR,GAAoB,EAApB;;AAEA,MAAMhB,cAAciB,SAASC,aAAT,CAAuB,MAAvB,CAApB;AACAlB,cAAYgB,SAAZ,GAAwBF,IAAxB;AACAJ,UAAQS,WAAR,CAAoBnB,WAApB;;AAEA,MAAMoB,eAAe,SAAfA,YAAe,CAACC,IAAD,EAAU;AAC7BrB,gBAAYa,YAAZ,CAAyB,OAAzB,sCAAoEQ,IAApE,GAA2ET,IAA3E;;AAEA,WAAO,CAACd,gBAAgBY,OAAhB,EAAyBV,WAAzB,CAAD,GACLoB,aAAaC,OAAOd,SAApB,CADK,GAELc,OAAOd,SAFT;AAGD,GAND;;AAQA,MAAMe,WAAWF,aAAa,CAAb,CAAjB;;AAEAV,UAAQM,SAAR,GAAoBF,IAApB;AACAJ,UAAQG,YAAR,CAAqB,OAArB,kBAA4CS,QAA5C,GAAuDV,IAAvD;AACD,CA1BD;;kBA4BeH,c","file":"scaleTextToFit.js","sourcesContent":["/* eslint-disable no-param-reassign */\n\n// The window width and heights are just an arbitrary upper limit\nconst textOutOfBounds = (containerElement, textElement) => {\n  const containerBounds = containerElement.getBoundingClientRect();\n  const textBounds = textElement.getBoundingClientRect();\n  return (\n    textBounds.height > containerBounds.height ||\n    textBounds.width > containerBounds.width\n  );\n};\n\nconst defaultOptions = {\n  increment: 1,\n  units: 'px',\n};\n\n// TODO move padding: 33% into stylesheet\nconst scaleTextToFit = (element, options) => {\n  const {\n    increment,\n    unit,\n  } = { ...defaultOptions, ...options };\n\n  element.setAttribute('style', 'position: relative;');\n  const text = element.textContent;\n  element.innerHTML = '';\n\n  const textElement = document.createElement('span');\n  textElement.innerHTML = text;\n  element.appendChild(textElement);\n\n  const findFontSize = (size) => {\n    textElement.setAttribute('style', `position: absolute; font-size: ${size}${unit};`);\n\n    return !textOutOfBounds(element, textElement) ?\n      findFontSize(size + increment) :\n      size - increment;\n  };\n\n  const fontSize = findFontSize(0);\n\n  element.innerHTML = text;\n  element.setAttribute('style', `font-size: ${fontSize}${unit}; overflow: hidden;`);\n};\n\nexport default scaleTextToFit;\n"]}