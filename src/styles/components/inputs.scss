// Inputs
// =============================================================================

@import "../global/default";

@mixin reset-input {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 50;
  opacity: 0;
}

@mixin default-input-type {
  @include typography('title-5');
}

@mixin text-input (
  $input-class: 'input'
) {
  .#{$input-class} {
    -webkit-appearance: none;
    border: 0;
    background: none;
    position: relative;
    width: 100%;
    height: 100%;
    &:focus, &:active {
      outline: 0;

      & + .#{$input-class}__label {
        transform: scale(.6) translate(0, 60px);
      }
    }

    &__container {
      position: relative;
      .#{$input-class}__label {
        position: absolute;
        top: 0;
        left: 0;

        transition: all 250ms ease-in-out;
        transform: scale(1) translate(0, 0);
        transform-origin: left top 0px;
        pointer-events: none;
        user-select: none;
        z-index: 1;

        &--active {
          transform: scale(.6) translate(0, 60px);
        }
      }
    }

    &__error {
      color: color('tomato');
    }

    font-family: inherit;
    color: color('white');
    border-bottom: 1px solid color('white');
  }
}

@mixin checkbox(
  $checkbox-class: 'checkbox'
) {
  .#{$checkbox-class} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 50;
    cursor: pointer;

    &__container {
      position: relative;
      cursor: pointer;

      .input__label {
        position: static;
        cursor: pointer;
        padding-left: 25px;
        margin: 0;
      }
    }
  }
}

@mixin radio(
  $radio-class: 'radio',
  $radio-button-size: 1.5em
) {
  .#{$radio-class} {
    @include reset-input;
    cursor: pointer;

    &__container {
      position: relative;
    }

    &__label {
      color: color('white', 0.7);
      &:before {
        content: '';
        background: transparent;
        border-radius: 100%;
        border: 1px solid color('white', 0.7);
        display: inline-block;
        width: $radio-button-size;
        height: $radio-button-size;
        margin-right: 1em;
        vertical-align: top;
        cursor: pointer;
        transition: all 250ms ease;
      }
    }

    &:checked {
      + .#{$radio-class}__label {
        color: color('white');
        &:before {
          background-color: color('sea-green');
          box-shadow: inset 0 0 0 4px color('navy-taupe');
        }
      }
    }

    &:focus {
      + .#{$radio-class}__label {
        &:before {
          outline: none;
          border-color: color('sea-green');
        }
      }
    }

    &:disabled {
      + .#{$radio-class}__label {
        &:before {
          box-shadow: inset 0 0 0 4px color('white');
          border-color: color('white', 0.7);
          background: color('white', 0.7);
        }
      }
    }
  }
}

@mixin toggle(
  $toggle-class: 'toggle',
  $toggle-height: 1.5em,
  $switch-size: 1.5em
) {
  .#{$toggle-class} {
    @include reset-input;
    cursor: pointer;

    &__container {
      position: relative;

      .input__label {
        position: static;
        cursor: pointer;
        margin: 0;
      }
    }

    &__slider {
      height: $toggle-height * .5;
      width: $switch-size * 1.5;
      position: relative;
      margin: .5em .75em;
    }

    &__button {
      position: absolute;
      cursor: pointer;
      background-color: transparent;
      border: 1px solid #ccc;
      border-radius: $toggle-height;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      &:before {
        position: absolute;
        content: "";
        border-radius: 50%;
        height: $switch-size;
        width: $switch-size;
        left: $switch-size * -.5;
        top: $switch-size * -.25;
        background-color: white;
        transition: .4s;
      }
    }

    &:checked + .#{$toggle-class}__slider .#{$toggle-class}__button {
      background-color: color('sea-green');

      @each $color-name, $color-group in $-color-map {
        @include modifier($color-name) {
          background-color: color($color-name);
        }
      }

      &:before {
        transform: translateX(26px);
      }
    }
  }
}

@mixin context(
  $context-class: 'context'
) {
  .#{$context-class} {
    @include reset-input;
    cursor: pointer;


    &__container {
      position: relative;
      min-height: 100px;
      min-width: 100px;

      .input__label {
        position: static;
        cursor: pointer;
        margin: 0;
      }
    }

    &__button {
      @include typography('title-5');
      font-weight: 700;

      position: absolute;
      top: 0;
      left: 0;
      height: 100px;
      width: 100px;
      background-color: transparent;
      border-radius: 50%;
      padding: 2px;
      border: 3px solid color('sea-green');

      display: flex;
      justify-content: center;
      align-items: center;
      transition: all $animation-standard-duration $animation-default-easing;

      @each $color-name, $color-group in $-color-map {
        @include modifier($color-name) {
          border: 3px solid color($color-name);
        }
      }

      &:after {
        transition: all $animation-standard-duration $animation-default-easing;
        position: absolute;
        top: 6%;
        left: 6%;
        content: '';
        height: 88%;
        width: 88%;
        opacity: 0;
        border-radius: 50%;
      }

      span {
        z-index: 5;
        pointer-events: none;
      }
    }

    &:checked + .#{$context-class}__button,
    &:hover + .#{$context-class}__button {
      background-color: transparent;

      &:after {
        transition: all $animation-standard-duration $animation-default-easing;
        opacity: 1;
        background-color: color('sea-green');
      }

      @each $color-name, $color-group in $-color-map {
        @include modifier($color-name) {
          &:after {
            background-color: color($color-name);
          }
        }
      }
    }
  }
}

@if $export-ui-classes {
  @include text-input;
  @include checkbox;
  @include radio;
  @include toggle;
  @include context;
}
